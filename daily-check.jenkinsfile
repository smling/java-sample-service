pipeline {
    agent any
    triggers {
        cron('H */4 * * 1-5')
    }
    options {
        buildDiscarder logRotator(numToKeepStr: '7')
    }
    stages {
        stage('Initial') {
            steps {
                script {
                    properties([
                        parameters([
                            string(
                                name: 'AWS_ECR_REPOSITORY_NAME',
                                defaultValue: "	sample-service",
                                trim: true
                            )
                        ])
                    ])
                    getCodeArtifactTokenCommand="export CODEARTIFACT_AUTH_TOKEN=`${AWS_CLI_HOME}bin/aws codeartifact get-authorization-token --domain d-sg-2 --domain-owner 440509023570 --query authorizationToken --output text`"
                }
            }
        }
        stage('Build') {
            steps {
                withEnv(["JAVA_HOME=${ tool 'jdk_11.0.11.0.9-1.el7_9' }"]) {
                    script {
                        buildCommand="${tool 'gradle-7.0.2'}/gradle clean build -x test javadoc"
                        sh """
                        ${getCodeArtifactTokenCommand}
                        ${buildCommand}
                        """
                    }
                    javadoc (
                       javadocDir:"build/docs/javadoc/",
                       keepAll: true
                    )
                }
            }
        }
		stage('Unit Test') {
			steps {
    		    script {
                    try {
                        unitTestCommand="${tool 'gradle-7.0.2'}/gradle test"
                        sh """
                        ${getCodeArtifactTokenCommand}
                        ${unitTestCommand}
                        """
                    } finally {
                        junit "build/test-results/test/*.xml"
                    }
    		    }
            }
        }
        stage('Code Analysis') {
            parallel {
                stage('Code Review') {
                    steps {
                        withSonarQubeEnv(installationName: 'sonarqube-server') { // You can override the credential to be used
                            withCredentials([string(credentialsId: 'SonarQubeToken', variable: 'TOKEN')]) {
                                script {
                                    sh """
                                    ${getCodeArtifactTokenCommand}
                                    ${tool 'gradle-7.0.2'}/gradle test jacocoTestReport sonarqube -Dsonar.login=$TOKEN
                                    """
                                }
                            }
                        }
                        jacoco(
                            execPattern: '**/jacoco.exec',
                            classPattern: '**/build/classes',
                            sourcePattern: '**/src',
                            inclusionPattern: '**/*.class,**/*.java'
                        )
                    }
                }
                stage('Dependency Check Report') {
                    steps {
                        dependencyCheck additionalArguments: '''
                            -o "./"
                            -s "./"
                            -f "ALL"
                            --prettyPrint''', odcInstallation: 'dependency-check-6.0.3'
                        dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                    }
                }
                stage('ECR Image Vulnerability Scan') {
                    steps {
                        script {
                            findingSeverity = sh([script: "${AWS_CLI_HOME}bin/aws ecr describe-images --repository-name ${AWS_ECR_REPOSITORY_NAME} | jq '.imageDetails|=sort_by(.imagePushedAt) |.[] |.[-1:] | .[] | .imageScanFindingsSummary.findingSeverityCounts'", returnStdout: true]).trim()
                            echo $findingSeverity
                            sh """
                            ${AWS_CLI_HOME}bin/aws ecr describe-images --repository-name ${AWS_ECR_REPOSITORY_NAME} | jq '.imageDetails|=sort_by(.imagePushedAt) |.[] |.[-1:] | .[] | .imageScanFindingsSummary.findingSeverityCounts'
                            """
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            //archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
            cleanWs()
        }
        failure {
            office365ConnectorSend webhookUrl: "${OFFICE_365_WEBHOOK}",
                    message:"Job ${env.JOB_NAME} failure. Build no: ${env.BUILD_NUMBER} (<${env.BUILD_URL}>);",
                    status: "Error"
        }
    }
}
