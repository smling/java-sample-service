apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-service-0.0.1
  namespace: tms
  labels:
    app: sample-service
  annotations:
    prometheus.io/scrape: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sample-service
  template:
    metadata:
      labels:
        app: sample-service
        version: "1.1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      volumes:
        - name: efs
          persistentVolumeClaim:
            claimName: tms-efs-claim
      containers:
        - name: sample-service
          image: 440509023570.dkr.ecr.us-west-2.amazonaws.com/prod-sample-service:1.1.0
          env:
            - name: UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8287
            initialDelaySeconds: 20
            periodSeconds: 2
            failureThreshold: 1
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8287
            initialDelaySeconds: 300
            periodSeconds: 3
            failureThreshold: 2
          ports:
            - containerPort: 8287
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: efs
              mountPath: "/mnt"
          resources:
            requests:
              memory: "1Gi"
              cpu: 1
            limits:
              memory: "1Gi"
              cpu: 1